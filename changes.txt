So, I restructured the entire codebase to make it more modular, organized, and easier to work with. 
I split up the app into smaller, focused pieces (using Flask's blueprints: https://flask.palletsprojects.com/en/stable/blueprints/). 

Now instead of having everything in one place, we have separate sections for:
- User stuff (login, registration)
- Gigs
- Messages
- Main pages
In my experience, this makes it easier to work on one section at a time, and assign different people to work on different sections.

Main Changes:
Login & User Details (/app/auth):
- Moved all the login code from server.py to its own space
- Using a simple in-memory dictionary to store users (we'll need to migrate to an SQL database later based on Wehar's recommendations)
- Set up hardcoded test accounts (bmmasi1, jjones6, etc.) with password "password123"
- Added styling to the login and registration pages
- Can now register new accounts during the app's runtime

Main Pages (/app/main):
- Added a welcome page with links to login/register or account page
- Simple navigation between pages

Templates (/app/templates):
- All pages now share the same basic layout and styling (using Jinja templates)
- Added flash messages for login/registration feedback
- Organized templates by feature (auth templates, main templates)
Jinja documentation: https://jinja.palletsprojects.com/en/stable/api/#basics

Add-Ons:
- Simple error handling for form validation
- Clean CSS styling for all pages
- Mobile-friendly design

If you're jumping into the code, here are the main files you'll want to look at:
- app/__init__.py - This is where everything comes together
- app/auth/* - All the login files are here
- app/main/* - The main pages
- app/templates/* - All our HTML
- app/static/* - CSS and JavaScript
- config.py - All our settings
- .env - Secret stuff (don't commit this!)

Starting venv:
python3 -m venv my_venv
source my_venv/bin/activate

Create a '.env' file in base directory and add:
FLASK_APP=run.py
FLASK_ENV=development
SECRET_KEY=super-secret-key

We'll add more variables as we go along such as database URIs, or any API keys we use.

To run app:
pip install -r requirements.txt (make sure you're in a virtual environment to avoid dependency issues)
flask run or python3 run.py

This will be helpful to debug and understand the backend HTTP response status codes: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status

Next Steps:
1. Building out the gigs section (our main priority)
2. Adding the messaging system
3. Adding user profiles
4. Eventually adding a proper database when needed

The gigs and messages modules are just placeholders for now - we'll can start building those out next!

Lmk if anything's unclear or if you want to know more about any part.